<?php
/**
 * @file
 * Module for creating custom navigation menus for ding_library.
 */

/**
 * Implements hook_menu_alter().
 */
function ding_library_menu_menu_alter(&$items) {
  foreach (module_invoke_all('ding_library_menu_links') as $path_suffix => $item) {
    // If the Link is to news og events we use the general news and event views.
    if (isset($item['linktype']) && $item['linktype'] == 'general_view_linktype') {
      $full_path = 'bibliotek/%pm_arg/' . $path_suffix;
    } else {
       $full_path = 'node/%pm_arg/' . $path_suffix;
    }    
    if (isset($items[$full_path]) && isset($item['title'])) {
      $items[$full_path]['title'] = $item['title'];
    }
  }
  // When the menu structure is being rebuilt, we also want to create
  // our own links.
  _ding_libary_menu_rebuild();
}

/**
 * Implements hook_node_insert().
 */
function ding_library_menu_node_insert($node) {
  if ($node->type == 'ding_library') {
    // Whenever a library is edited, we need to rebuild the menu to have
    // the correct links generated.
    variable_set('menu_rebuild_needed', TRUE);
  }
}

/**
 * Implements hook_node_update().
 */
function ding_library_menu_node_update($node) {
  if ($node->type == 'ding_library') {
    // Whenever a library is edited, we need to rebuild the menu to have
    // the correct links generated.
    variable_set('menu_rebuild_needed', TRUE);
  }
}

/**
 * Rebuild our custom menu items.
 */
function _ding_libary_menu_rebuild() {
  // Get the menu item we want as parent for our libraries.
  // This should be provided by ding_library as the main list of libraries.
  $root_link = menu_link_get_preferred('libraries');

  // Get the menu links we created previously, so we won't overwrite
  // user changes to title, etc.
  $existing_links = db_query("
    SELECT link_path, link_title, menu_name, weight, expanded, options, mlid, plid, router_path
    FROM {menu_links} WHERE module = 'ding_library_menu';
  ")->fetchAllAssoc('link_path', PDO::FETCH_ASSOC);

  // Get all library nodes we might want to provide menus for.
  $nodes = node_load_multiple(array(), array('type' => 'ding_library', 'status' => 1));

  // Collect a list of actual links, so we'll know which are the
  // outdated ones, so they can be removed.
  $actual_links = array();

  foreach ($nodes as $node) {
    $path_parts = array('node', $node->nid);

    // For the main library page, we use the root link as parent.
    $parent = $root_link;

    $path = implode('/', $path_parts);
    // If link does not exist, create it.
    if (empty($existing_links[$path])) {
      /*
       * We cannot use the same title as the router item to get the
       * link title translated, as the router item for node/% is empty
       * and an empty string would then be used in the menu admin
       * pages. The loss isn't that great though, as library names are
       * proper names, and you'd translate the node itself which gets
       * a new menu link anyway.
       */
      $item = _ding_libary_menu_save($path, $node->title, $parent);
      $existing_links[$path] = $item;
    }
    else {
      $item = menu_link_load($existing_links[$path]['mlid']);
      $item['link_title'] = $node->title;
      menu_link_save($item);
    }
    $actual_links[] = $path;


    foreach (module_invoke_all('ding_library_menu_links') as $path_suffix => $link) {
      // If the Link is to news og events we use the general news and event views.
      if (isset($link['linktype']) && $link['linktype'] == 'general_view_linktype') {
        $path_parts = array('bibliotek', $node->nid);
      } else {
        $path_parts = array('node', $node->nid);
      }
      
      $path_parts[] = $path_suffix;

      // Use the main page as parent.
      // TODO: This does not work with deeper links (ie.
      // node/1/events/today/whatever)
      $parent = $existing_links['node/' . $node->nid];

      // Don't create parent-less menu links.
      if (empty($parent)) {
        continue;
      }

      $path = implode('/', $path_parts);

      // If link does not exist, create it.
      if (empty($existing_links[$path])) {
        /* Using the same as the router  makes translation work. */
        $item = _ding_libary_menu_save($path, $link['title'], $parent, empty($link['weight']) ? 0 : $link['weight']);

        $existing_links[$path] = $item;
      }

      $actual_links[] = $path;
    }
  }

  foreach (array_diff(array_keys($existing_links), $actual_links) as $path) {
    menu_link_delete($existing_links[$path]['mlid']);
  }
}

function _ding_libary_menu_save($path, $title, $parent, $weight = NULL) {
  $item = array(
    'plid' => $parent['mlid'],
    'menu_name' => $parent['menu_name'],
    'link_path' => $path,
    'link_title' => $title,
    'module' => 'ding_library_menu',
    'customized' => 0,
    'weight' => $weight ? $weight : 0,
  );

  return menu_link_save($item) ? $item : FALSE;
}
